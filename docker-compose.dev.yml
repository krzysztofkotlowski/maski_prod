version: '3.8'

services:
  db:
    image: postgres:13
    environment:
      POSTGRES_USER: myuser
      POSTGRES_PASSWORD: mypassword
      POSTGRES_DB: keycloak
    volumes:
      - db-data:/var/lib/postgresql/data
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./db/migration.sql:/docker-entrypoint-initdb.d/migration.sql

  backend:
    build: ./backend
    depends_on:
      - db
    environment:
      DATABASE_HOST: db
      DATABASE_USER: myuser
      DATABASE_PASSWORD: mypassword
      DATABASE_NAME: mydatabase
      KEYCLOAK_URL: http://localhost/auth
      KEYCLOAK_REALM: myrealm
      KEYCLOAK_CLIENT_ID: myclient
    volumes:
      - ./backend:/app
    ports:
      - "80:5000"
    command: python -m flask run --host=0.0.0.0 --port=5000

  frontend:
    build: ./frontend
    ports:
      - "80:3000"
    depends_on:
      - backend
    environment:
      - REACT_APP_API_URL=http://localhost/api
      - REACT_APP_KEYCLOAK_URL=http://localhost/auth
      - REACT_APP_KEYCLOAK_REALM=myrealm
      - REACT_APP_KEYCLOAK_CLIENT_ID=myclient
    volumes:
      - ./frontend:/app
      - /app/node_modules
    command: npm start

  nginx:
    build: ./nginx.dev
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - frontend
      - backend
      - keycloak 

  keycloak:
    image: quay.io/keycloak/keycloak:latest
    environment:
      KC_DB: postgres
      KC_DB_URL_HOST: db
      KC_DB_URL_PORT: 5432
      KC_DB_USERNAME: myuser
      KC_DB_PASSWORD: mypassword
      KC_DB_DATABASE: keycloak
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: adminpassword
      PROXY_ADDRESS_FORWARDING: "true"
      KC_HOSTNAME: localhost
      KC_HTTP_RELATIVE_PATH: /auth
      KC_HOSTNAME_STRICT: "false"
      KC_HOSTNAME_STRICT_HTTPS: "false"
      KC_HOSTNAME_ADMIN: localhost
      KC_HTTP_PORT: 8080
      KC_HTTPS_PORT: 8080 
      KC_LOG_LEVEL: ALL
      KC_METRICS_ENABLED: true
      KEYCLOAK_FRONTEND_URL: http://localhost/auth
      KC_PROXY: edge
      KC_HEALTH_ENABLED: true
    ports:
      - "8080:8080"
    depends_on:
      - db
    command: ["start-dev"]

volumes:
  db-data:
